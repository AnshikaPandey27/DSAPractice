class Solution {
public:
    bool closeStrings(string word1, string word2) {
     unordered_map<char,int>w1;
      unordered_map<char,int>w2;
      vector<int>arr1;
       vector<int>arr2;
       string a1="";
       string a2="";
       int c;
       if(word1.length()!=word2.length())
       return false;
       else
       {
     for(int i=0;i<word1.length();i++)
     {
         if (w1.find(word1[i]) == w1.end())
        {
            w1.insert(make_pair(word1[i], 1));
        }
        else
        {
            w1[word1[i]]++;
        }
    }
    for (auto& it : w1) {
        arr1.push_back(it.second);
        a1=a1+it.first;
    }
    for(int i=0;i<word2.length();i++)
     {
         if (w2.find(word2[i]) == w2.end())
        {
            w2.insert(make_pair(word2[i], 1));
        }
        else
        {
            w2[word2[i]]++;
        }
    }
    for (auto& it : w2) {
        arr2.push_back(it.second);
        a2=a2+it.first;
    }
    sort(arr1.begin(),arr1.end());
        sort(arr2.begin(),arr2.end());
        
    sort(a1.begin(),a1.end());
        sort(a2.begin(),a2.end());
     c=0;
     int m=min(arr1.size(),arr2.size());
    for(int i=0;i<m;i++)
    {
    if(arr1[i]!=arr2[i]||a1[i]!=a2[i])
    c++;
    }
       }
    if(c==0)
    return true;
    else
    return false;
    }
};
