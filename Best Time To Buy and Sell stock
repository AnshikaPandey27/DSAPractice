//Brute Force O(n^2)time and O(1) space
class Solution1 {
public:
    int maxProfit(vector<int>& prices) {
        int maxp=0;
        for(int i=0;i<prices.size()-1;i++)
        {
            for(int j=i+1;j<prices.size();j++)
            {
                if(prices[j]-prices[i]>maxp)
                maxp=prices[j]-prices[i];
            }
        }
        return maxp;
    }
};
//Recurrence Naive Solution O(n^2)time and O(stack space) 
class Solution2 {
public:
    int f(vector<int>&prices,int i)
    {
        if(i==prices.size()-1)
        return 0;
        return max(f(prices,i+1),g(prices,i+1)-prices[i]);
    }
    int g(vector<int>&prices,int i)
    {
        if(i==prices.size())
        return 0;
        return max(g(prices,i+1),prices[i]);
    }
    int maxProfit(vector<int>& prices) {
        int ans=f(prices,0);
        return ans;
    }
};
//Memoized solution O(n)time and O(stack space) + O(n) space
class Solution3 {
public:
     int f(vector<int>&prices,int i,int ft[],int gt[])
    {
        if(ft[i]!=INT_MIN)
        return ft[i];
        return ft[i]=max(f(prices,i+1,ft,gt),g(prices,i+1,ft,gt)-prices[i]);
    }
    int g(vector<int>&prices,int i,int ft[],int gt[])
    {
        if(gt[i]!=INT_MIN)
        return gt[i];
        return gt[i]=max(g(prices,i+1,ft,gt),prices[i]);
    }
    int maxProfit(vector<int>& prices) {
        int ft[prices.size()+1];
        int gt[prices.size()+1];
        ft[prices.size()]=0;
        gt[prices.size()]=prices[prices.size()-1];
        for(int i=0;i<prices.size();i++)
        {
            ft[i]=INT_MIN;
            gt[i]=INT_MIN;
        }
        int ans=f(prices,0,ft,gt);
        return ans;
    }
};

//Bottom up solution (Iterative) O(n)time and  O(n) space 
class Solution4 {
public:
    int maxProfit(vector<int>& prices) {
        int ft[prices.size()+1];
        int gt[prices.size()+1];
        ft[prices.size()]=0;
        gt[prices.size()]=prices[prices.size()-1];
        for(int i=prices.size()-1;i>=0;i--)
        {
            ft[i]=max(ft[i+1],gt[i+1]-prices[i]);
            gt[i]=max(gt[i+1],prices[i]);
        }
        return ft[0];
    }
};

//Using 2 variables only O(n)time and  O(1) space 
class Solution5 {
public:
    int maxProfit(vector<int>& prices) {
        int f=0;
        int g=prices[prices.size()-1];
        for(int i=prices.size()-1;i>=0;i--)
        {
            f=max(f,g-prices[i]);
            g=max(g,prices[i]);
        }
        return f;
    }
};

//follow up answer
class Solution6 {
public:
    int maxProfit(vector<int>& prices) {
        int maxp=0;
        int l=prices[0];
        for(int i=0;i<prices.size();i++)
        {
            maxp=max(maxp,prices[i]-l);
            l=min(l,prices[i]);
        }
        return maxp;
    }
};

